{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with a base URL\nconst instance = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  timeout: 10000,\n  // 10 seconds\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor - adds auth token to requests if available\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject({\n    success: false,\n    error: 'Request preparation failed'\n  });\n});\n\n// Response interceptor - standardizes responses and error handling\ninstance.interceptors.response.use(response => {\n  // Just return the data portion of the response\n  return response.data;\n}, error => {\n  // Handle errors consistently\n  let errorMessage = 'An unexpected error occurred';\n  if (error.response) {\n    // Server responded with an error status code (4xx or 5xx)\n    const status = error.response.status;\n\n    // Get error message from response if available\n    if (error.response.data && error.response.data.error) {\n      errorMessage = error.response.data.error;\n    } else {\n      // Default messages for common status codes\n      if (status === 401) {\n        errorMessage = 'Authentication failed. Please login again.';\n      } else if (status === 403) {\n        errorMessage = 'You do not have permission to perform this action.';\n      } else if (status === 404) {\n        errorMessage = 'Resource not found.';\n      } else if (status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n    }\n  } else if (error.request) {\n    // Request was made but no response received\n    errorMessage = 'Network error or server is not responding';\n  }\n\n  // Return standardized error format\n  return Promise.reject({\n    success: false,\n    error: errorMessage\n  });\n});\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","success","response","data","errorMessage","status"],"sources":["/Users/peikexu/Documents/goal_tracker/goal-planner-app/src/api/axios.js"],"sourcesContent":["import axios from 'axios';\n\n// Create an axios instance with a base URL\nconst instance = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  timeout: 10000, // 10 seconds\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor - adds auth token to requests if available\ninstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject({\n      success: false,\n      error: 'Request preparation failed'\n    });\n  }\n);\n\n// Response interceptor - standardizes responses and error handling\ninstance.interceptors.response.use(\n  (response) => {\n    // Just return the data portion of the response\n    return response.data;\n  },\n  (error) => {\n    // Handle errors consistently\n    let errorMessage = 'An unexpected error occurred';\n    \n    if (error.response) {\n      // Server responded with an error status code (4xx or 5xx)\n      const status = error.response.status;\n      \n      // Get error message from response if available\n      if (error.response.data && error.response.data.error) {\n        errorMessage = error.response.data.error;\n      } else {\n        // Default messages for common status codes\n        if (status === 401) {\n          errorMessage = 'Authentication failed. Please login again.';\n        } else if (status === 403) {\n          errorMessage = 'You do not have permission to perform this action.';\n        } else if (status === 404) {\n          errorMessage = 'Resource not found.';\n        } else if (status === 500) {\n          errorMessage = 'Server error. Please try again later.';\n        }\n      }\n    } else if (error.request) {\n      // Request was made but no response received\n      errorMessage = 'Network error or server is not responding';\n    }\n    \n    // Return standardized error format\n    return Promise.reject({\n      success: false,\n      error: errorMessage\n    });\n  }\n);\n\nexport default instance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,QAAQ,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAAC;IACpBC,OAAO,EAAE,KAAK;IACdH,KAAK,EAAE;EACT,CAAC,CAAC;AACJ,CACF,CAAC;;AAED;AACAZ,QAAQ,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC/BS,QAAQ,IAAK;EACZ;EACA,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EACAL,KAAK,IAAK;EACT;EACA,IAAIM,YAAY,GAAG,8BAA8B;EAEjD,IAAIN,KAAK,CAACI,QAAQ,EAAE;IAClB;IACA,MAAMG,MAAM,GAAGP,KAAK,CAACI,QAAQ,CAACG,MAAM;;IAEpC;IACA,IAAIP,KAAK,CAACI,QAAQ,CAACC,IAAI,IAAIL,KAAK,CAACI,QAAQ,CAACC,IAAI,CAACL,KAAK,EAAE;MACpDM,YAAY,GAAGN,KAAK,CAACI,QAAQ,CAACC,IAAI,CAACL,KAAK;IAC1C,CAAC,MAAM;MACL;MACA,IAAIO,MAAM,KAAK,GAAG,EAAE;QAClBD,YAAY,GAAG,4CAA4C;MAC7D,CAAC,MAAM,IAAIC,MAAM,KAAK,GAAG,EAAE;QACzBD,YAAY,GAAG,oDAAoD;MACrE,CAAC,MAAM,IAAIC,MAAM,KAAK,GAAG,EAAE;QACzBD,YAAY,GAAG,qBAAqB;MACtC,CAAC,MAAM,IAAIC,MAAM,KAAK,GAAG,EAAE;QACzBD,YAAY,GAAG,uCAAuC;MACxD;IACF;EACF,CAAC,MAAM,IAAIN,KAAK,CAACN,OAAO,EAAE;IACxB;IACAY,YAAY,GAAG,2CAA2C;EAC5D;;EAEA;EACA,OAAOL,OAAO,CAACC,MAAM,CAAC;IACpBC,OAAO,EAAE,KAAK;IACdH,KAAK,EAAEM;EACT,CAAC,CAAC;AACJ,CACF,CAAC;AAED,eAAelB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}