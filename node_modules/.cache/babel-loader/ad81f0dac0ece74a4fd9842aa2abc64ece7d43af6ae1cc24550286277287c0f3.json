{"ast":null,"code":"// utils/dateUtils.js\n/**\n * Format date to display in a human-readable format\n * @param {Date|string} date - The date to format\n * @returns {string} Formatted date string\n */\nexport const formatDate = date => {\n  if (!date) return '';\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }).format(dateObj);\n};\n\n/**\n * Calculate the number of days between two dates\n * @param {Date|string} startDate - The start date\n * @param {Date|string} endDate - The end date (defaults to current date)\n * @returns {number} Number of days\n */\nexport const daysBetween = (startDate, endDate = new Date()) => {\n  const start = typeof startDate === 'string' ? new Date(startDate) : startDate;\n  const end = typeof endDate === 'string' ? new Date(endDate) : endDate;\n\n  // Calculate difference in milliseconds\n  const diffTime = Math.abs(end - start);\n\n  // Convert to days\n  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n};\n\n/**\n * Get a relative time string (e.g., \"2 days ago\", \"in 3 months\")\n * @param {Date|string} date - The date to format\n * @returns {string} Relative time string\n */\nexport const getRelativeTimeString = date => {\n  if (!date) return '';\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  const rtf = new Intl.RelativeTimeFormat('en', {\n    numeric: 'auto'\n  });\n  const now = new Date();\n  const diffInSeconds = Math.floor((dateObj - now) / 1000);\n\n  // Convert to appropriate unit\n  if (Math.abs(diffInSeconds) < 60) {\n    return rtf.format(diffInSeconds, 'second');\n  } else if (Math.abs(diffInSeconds) < 3600) {\n    return rtf.format(Math.floor(diffInSeconds / 60), 'minute');\n  } else if (Math.abs(diffInSeconds) < 86400) {\n    return rtf.format(Math.floor(diffInSeconds / 3600), 'hour');\n  } else if (Math.abs(diffInSeconds) < 2592000) {\n    return rtf.format(Math.floor(diffInSeconds / 86400), 'day');\n  } else if (Math.abs(diffInSeconds) < 31536000) {\n    return rtf.format(Math.floor(diffInSeconds / 2592000), 'month');\n  } else {\n    return rtf.format(Math.floor(diffInSeconds / 31536000), 'year');\n  }\n};\n\n/**\n * Check if a date is in the past\n * @param {Date|string} date - The date to check\n * @returns {boolean} True if the date is in the past\n */\nexport const isDatePast = date => {\n  if (!date) return false;\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  return dateObj < now;\n};\n\n/**\n * Format a date as an ISO string (YYYY-MM-DD)\n * @param {Date|string} date - The date to format\n * @returns {string} Formatted date string\n */\nexport const formatISODate = date => {\n  if (!date) return '';\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return dateObj.toISOString().split('T')[0];\n};\n\n/**\n * Get start and end dates for a timeframe relative to today\n * @param {string} timeframe - The timeframe (week, month, quarter, halfYear, year)\n * @returns {Object} Object containing start and end dates\n */\nexport const getTimeframeDates = timeframe => {\n  const now = new Date();\n  const start = new Date();\n  let end = new Date();\n  switch (timeframe) {\n    case 'week':\n      end.setDate(now.getDate() + 7);\n      break;\n    case 'month':\n      end.setMonth(now.getMonth() + 1);\n      break;\n    case 'quarter':\n      end.setMonth(now.getMonth() + 3);\n      break;\n    case 'halfYear':\n      end.setMonth(now.getMonth() + 6);\n      break;\n    case 'year':\n      end.setFullYear(now.getFullYear() + 1);\n      break;\n    default:\n      end.setMonth(now.getMonth() + 1);\n    // Default to 1 month\n  }\n  return {\n    start: start,\n    end: end\n  };\n};","map":{"version":3,"names":["formatDate","date","dateObj","Date","Intl","DateTimeFormat","year","month","day","format","daysBetween","startDate","endDate","start","end","diffTime","Math","abs","ceil","getRelativeTimeString","rtf","RelativeTimeFormat","numeric","now","diffInSeconds","floor","isDatePast","formatISODate","toISOString","split","getTimeframeDates","timeframe","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear"],"sources":["/Users/peikexu/Documents/goal_tracker/goal-planner-app/src/utils/dateUtils.js"],"sourcesContent":["// utils/dateUtils.js\n/**\n * Format date to display in a human-readable format\n * @param {Date|string} date - The date to format\n * @returns {string} Formatted date string\n */\nexport const formatDate = (date) => {\n    if (!date) return '';\n    \n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    \n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }).format(dateObj);\n  };\n  \n  /**\n   * Calculate the number of days between two dates\n   * @param {Date|string} startDate - The start date\n   * @param {Date|string} endDate - The end date (defaults to current date)\n   * @returns {number} Number of days\n   */\n  export const daysBetween = (startDate, endDate = new Date()) => {\n    const start = typeof startDate === 'string' ? new Date(startDate) : startDate;\n    const end = typeof endDate === 'string' ? new Date(endDate) : endDate;\n    \n    // Calculate difference in milliseconds\n    const diffTime = Math.abs(end - start);\n    \n    // Convert to days\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n  \n  /**\n   * Get a relative time string (e.g., \"2 days ago\", \"in 3 months\")\n   * @param {Date|string} date - The date to format\n   * @returns {string} Relative time string\n   */\n  export const getRelativeTimeString = (date) => {\n    if (!date) return '';\n    \n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    \n    const rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\n    const now = new Date();\n    const diffInSeconds = Math.floor((dateObj - now) / 1000);\n    \n    // Convert to appropriate unit\n    if (Math.abs(diffInSeconds) < 60) {\n      return rtf.format(diffInSeconds, 'second');\n    } else if (Math.abs(diffInSeconds) < 3600) {\n      return rtf.format(Math.floor(diffInSeconds / 60), 'minute');\n    } else if (Math.abs(diffInSeconds) < 86400) {\n      return rtf.format(Math.floor(diffInSeconds / 3600), 'hour');\n    } else if (Math.abs(diffInSeconds) < 2592000) {\n      return rtf.format(Math.floor(diffInSeconds / 86400), 'day');\n    } else if (Math.abs(diffInSeconds) < 31536000) {\n      return rtf.format(Math.floor(diffInSeconds / 2592000), 'month');\n    } else {\n      return rtf.format(Math.floor(diffInSeconds / 31536000), 'year');\n    }\n  };\n  \n  /**\n   * Check if a date is in the past\n   * @param {Date|string} date - The date to check\n   * @returns {boolean} True if the date is in the past\n   */\n  export const isDatePast = (date) => {\n    if (!date) return false;\n    \n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    const now = new Date();\n    \n    return dateObj < now;\n  };\n  \n  /**\n   * Format a date as an ISO string (YYYY-MM-DD)\n   * @param {Date|string} date - The date to format\n   * @returns {string} Formatted date string\n   */\n  export const formatISODate = (date) => {\n    if (!date) return '';\n    \n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    \n    return dateObj.toISOString().split('T')[0];\n  };\n  \n  /**\n   * Get start and end dates for a timeframe relative to today\n   * @param {string} timeframe - The timeframe (week, month, quarter, halfYear, year)\n   * @returns {Object} Object containing start and end dates\n   */\n  export const getTimeframeDates = (timeframe) => {\n    const now = new Date();\n    const start = new Date();\n    let end = new Date();\n    \n    switch (timeframe) {\n      case 'week':\n        end.setDate(now.getDate() + 7);\n        break;\n      case 'month':\n        end.setMonth(now.getMonth() + 1);\n        break;\n      case 'quarter':\n        end.setMonth(now.getMonth() + 3);\n        break;\n      case 'halfYear':\n        end.setMonth(now.getMonth() + 6);\n        break;\n      case 'year':\n        end.setFullYear(now.getFullYear() + 1);\n        break;\n      default:\n        end.setMonth(now.getMonth() + 1); // Default to 1 month\n    }\n    \n    return {\n      start: start,\n      end: end\n    };\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}